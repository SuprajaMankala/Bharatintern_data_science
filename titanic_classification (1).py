# -*- coding: utf-8 -*-
"""Titanic_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PvgW4n5P5uLArspAPbs7ynTndOJmfN56

Task 2:Titanic Classifiction
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#load the data from csv file to pandas DataFrame
titanic_data=pd.read_csv('/content/train (1).csv')

from google.colab import drive
drive.mount('/content/drive')

#printing the first 5 rows of the datframet
titanic_data.head()

#number of rows and columns
titanic_data.shape

#Getting some information about data
titanic_data.info()

#check the number of missing values in each column
titanic_data.isnull().sum()

"""Handling the missing values"""

#drop the "Cabin" column from the dataframe
titanic_data=titanic_data.drop(columns='Cabin',axis=1)

#replacing the missing values of "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(),inplace=True)

#finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

#replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0],inplace=True)

#check the number of missing values in each column
titanic_data.isnull().sum()

#getting some statistical measures about the data
titanic_data.describe()

#finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data Visualization"""

sns.set()

# Making  count  plot for "Survived" column
sns.countplot(x=titanic_data["Survived"])

titanic_data['Sex'].value_counts()

#making a count plot for "sex" column
sns.countplot(x=titanic_data["Sex"])

#number of survivors gender wise
sns.countplot(x='Sex',hue='Survived',data=titanic_data)

#making a count plot for "Pclass" column
sns.countplot(x=titanic_data["Pclass"])

#number of survivors gender wise
sns.countplot(x='Pclass',hue='Survived',data=titanic_data)

"""Encoding the categorical columns"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting categorical columns
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}},inplace=True)

titanic_data.head()

"""Separating features and target"""

X=titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
Y=titanic_data['Survived']

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
x_train_prediction=model.predict(X_train)

print(x_train_prediction)

training_data_accuracy=accuracy_score(Y_train,x_train_prediction)
print('Accuracy score of training data:',training_data_accuracy)

#accuracy on test data
x_test_prediction=model.predict(X_test)

print(x_test_prediction)

test_data_accuracy=accuracy_score(Y_test,x_test_prediction)
print('Accuracy score of test data:',test_data_accuracy)